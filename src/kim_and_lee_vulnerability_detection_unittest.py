import unittest

from kim_and_lee_vulnerability_detection import (is_safe_url_prefix, is_safe_origin_suffix,
                                                 expression_correctly_verifies_sender_url,
                                                 expression_correctly_verifies_sender,
                                                 get_all_message_listeners, DataFlow)
from node_unittest2 import generate_pdg


class TestSenderAuthentication(unittest.TestCase):
    def test_url_prefix_check(self):
        # Positive examples:
        self.assertTrue(is_safe_url_prefix("https://admin.com/"))
        self.assertTrue(is_safe_url_prefix("https://admin.com/foo"))

        # Negative examples:
        self.assertFalse(is_safe_url_prefix("https://admin.com"))
        self.assertFalse(is_safe_url_prefix("http://admin.com/"))  # HTTP
        self.assertFalse(is_safe_url_prefix("http://admin.com/foo"))  # HTTP

    def test_origin_suffix_check(self):
        # Positive examples:
        self.assertTrue(is_safe_origin_suffix(".admin.com"))
        self.assertTrue(is_safe_origin_suffix(".admin.co.uk"))
        self.assertTrue(is_safe_origin_suffix("/admin.com"))
        self.assertTrue(is_safe_origin_suffix("//admin.com"))
        self.assertTrue(is_safe_origin_suffix("://admin.com"))
        self.assertTrue(is_safe_origin_suffix("https://admin.com"))

        # Negative examples:
        self.assertFalse(is_safe_origin_suffix("admin.com"))
        self.assertFalse(is_safe_origin_suffix(".co.uk"))
        self.assertFalse(is_safe_origin_suffix("http://admin.com"))
        self.assertFalse(is_safe_origin_suffix(".sth.ac.at"))  # https://publicsuffix.org/
        self.assertFalse(is_safe_origin_suffix("foo.sth.ac.at"))

    def test_get_all_message_listeners(self):
        # Test FunctionExpression:
        pdg = generate_pdg(r"""chrome.runtime.onMessage.addListener(function (x,y,z) {});""")
        print(pdg)
        # [1] [Program] (1 child)
        # 	[2] [ExpressionStatement] (1 child)
        # 		[3] [CallExpression] (2 children)
        # 			[4] [MemberExpression] (2 children)
        # 				[5] [MemberExpression] (2 children)
        # 					[6] [MemberExpression] (2 children)
        # 						[7] [Identifier:"chrome"] (0 children)
        # 						[8] [Identifier:"runtime"] (0 children)
        # 					[9] [Identifier:"onMessage"] (0 children)
        # 				[10] [Identifier:"addListener"] (0 children)
        # 			[11] [FunctionExpression] (4 children)
        # 				[12] [Identifier:"x"] (0 children)
        # 				[13] [Identifier:"y"] (0 children)
        # 				[14] [Identifier:"z"] (0 children)
        # 				[15] [BlockStatement] (0 children)
        for resolve_function_references in [True, False]:
            msg_listeners = get_all_message_listeners(pdg, resolve_function_references=resolve_function_references)
            print(f"msg_listeners = {msg_listeners}")
            self.assertEqual(len(msg_listeners), 1)
            self.assertEqual(msg_listeners[0].name, "FunctionExpression")

        # Test ArrowFunctionExpression:
        pdg = generate_pdg(r"""chrome.runtime.onMessage.addListener((x,y,z) => {});""")
        print(pdg)
        # [1] [Program] (1 child)
        # 	[2] [ExpressionStatement] (1 child)
        # 		[3] [CallExpression] (2 children)
        # 			[4] [MemberExpression] (2 children)
        # 				[5] [MemberExpression] (2 children)
        # 					[6] [MemberExpression] (2 children)
        # 						[7] [Identifier:"chrome"] (0 children)
        # 						[8] [Identifier:"runtime"] (0 children)
        # 					[9] [Identifier:"onMessage"] (0 children)
        # 				[10] [Identifier:"addListener"] (0 children)
        # 			[11] [ArrowFunctionExpression] (4 children)
        # 				[12] [Identifier:"x"] (0 children)
        # 				[13] [Identifier:"y"] (0 children)
        # 				[14] [Identifier:"z"] (0 children)
        # 				[15] [BlockStatement] (0 children)
        for resolve_function_references in [True, False]:
            msg_listeners = get_all_message_listeners(pdg, resolve_function_references=resolve_function_references)
            print(f"msg_listeners = {msg_listeners}")
            self.assertEqual(len(msg_listeners), 1)
            self.assertEqual(msg_listeners[0].name, "ArrowFunctionExpression")

        # Test Identifier/FunctionDeclaration:
        pdg = generate_pdg(r"""function foo(x,y,z) {}
                               chrome.runtime.onMessage.addListener(foo);""")
        print(pdg)
        # [1] [Program] (2 children)
        # 	[2] [FunctionDeclaration] (5 children) --e--> [7]
        # 		[3] [Identifier:"foo"] (0 children) --data--> [17]
        # 		[4] [Identifier:"x"] (0 children)
        # 		[5] [Identifier:"y"] (0 children)
        # 		[6] [Identifier:"z"] (0 children)
        # 		[7] [BlockStatement] (0 children)
        # 	[8] [ExpressionStatement] (1 child)
        # 		[9] [CallExpression] (2 children)
        # 			[10] [MemberExpression] (2 children)
        # 				[11] [MemberExpression] (2 children)
        # 					[12] [MemberExpression] (2 children)
        # 						[13] [Identifier:"chrome"] (0 children)
        # 						[14] [Identifier:"runtime"] (0 children)
        # 					[15] [Identifier:"onMessage"] (0 children)
        # 				[16] [Identifier:"addListener"] (0 children)
        # 			[17] [Identifier:"foo"] (0 children)
        msg_listeners = get_all_message_listeners(pdg, resolve_function_references=True)
        print(f"msg_listeners = {msg_listeners}")
        self.assertEqual(len(msg_listeners), 1)
        self.assertEqual(msg_listeners[0].name, "FunctionDeclaration")
        self.assertEqual(msg_listeners[0].children[0].name, "Identifier")
        self.assertEqual(msg_listeners[0].children[0].attributes['name'], "foo")
        msg_listeners = get_all_message_listeners(pdg, resolve_function_references=False)
        print(f"msg_listeners = {msg_listeners}")
        self.assertEqual(len(msg_listeners), 1)
        self.assertEqual(msg_listeners[0].name, "Identifier")
        self.assertEqual(msg_listeners[0].attributes['name'], "foo")

    def test_expression_correctly_verifies_sender_url(self):
        for quotation_char in ["\"", "'"]:
            pdg = generate_pdg(f"if (url.startsWith({quotation_char}https://admin.com/{quotation_char}))" + " {}")
            print(pdg)
            # [1] [Program] (1 child)
            # 	[2] [IfStatement] (2 children) --True--> [67]
            # 		[3] [CallExpression] (2 children)
            # 			[4] [MemberExpression] (2 children)
            # 				[5] [Identifier:"url"] (0 children)
            # 				[6] [Identifier:"startsWith"] (0 children)
            # 			[7] [Literal:"'https://admin.com/'"] (0 children)
            # 		[8] [BlockStatement] (0 children)
            test_expression = pdg.children[0].children[0]
            print(test_expression)
            # [3] [CallExpression] (2 children)
            # 	[4] [MemberExpression] (2 children)
            # 		[5] [Identifier:"url"] (0 children)
            # 		[6] [Identifier:"startsWith"] (0 children)
            # 	[7] [Literal:"'https://admin.com/'"] (0 children)
            sender_url_node = test_expression.get_all("Identifier")[0]
            print(f"sender_url_node = {sender_url_node}")
            # sender_url_node = [5] [Identifier:"url"] (0 children)
            self.assertTrue(expression_correctly_verifies_sender_url(test_expression=test_expression,
                                                                     sender_url_node=sender_url_node))

    def test_expression_correctly_verifies_sender(self):
        pdg = generate_pdg("""let url = sender.url; if (url.startsWith("https://admin.com/")) {}""")
        print(pdg)
        # [1] [Program] (2 children)
        # 	[2] [VariableDeclaration] (1 child)
        # 		[3] [VariableDeclarator] (2 children)
        # 			[4] [Identifier:"url"] (0 children) --data--> [11]
        # 			[5] [MemberExpression] (2 children)
        # 				[6] [Identifier:"sender"] (0 children) --data--> [4]
        # 				[7] [Identifier:"url"] (0 children) --data--> [4]
        # 	[8] [IfStatement] (2 children) --True--> [14]
        # 		[9] [CallExpression] (2 children)
        # 			[10] [MemberExpression] (2 children)
        # 				[11] [Identifier:"url"] (0 children)
        # 				[12] [Identifier:"startsWith"] (0 children)
        # 			[13] [Literal:""https://admin.com/""] (0 children)
        # 		[14] [BlockStatement] (0 children)
        if_statement = pdg.get_child("IfStatement")  # [8] [IfStatement] (2 children) --True--> [14]
        test_expression = if_statement.get_child("CallExpression")  # [9] [CallExpression] (2 children)
        original_sender_node = pdg.get_child("VariableDeclaration")\
                                  .get_child("VariableDeclarator")\
                                  .get_child("MemberExpression")\
                                  .children[0]
        sender_node = test_expression.get_child("MemberExpression").children[0]  # [11] [Identifier:"url"] (0 children)
        data_flows = DataFlow.beginning_at(original_sender_node)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        data_flow = data_flows[0]

        print(f"test_expression = {test_expression}")
        print(f"sender_node = {sender_node}")
        print(f"data_flow = {data_flow}")
        print(f"data_flow.get_accessed_members(include_method_calls=True) = "
              f"{data_flow.get_accessed_members(include_method_calls=True)}")
        print(f"data_flow.get_accessed_members(include_method_calls=False) = "
              f"{data_flow.get_accessed_members(include_method_calls=False)}")
        self.assertTrue(expression_correctly_verifies_sender(test_expression=test_expression,
                                                             sender_node=sender_node,
                                                             data_flow=data_flow))

    def test_get_accessed_members(self):
        pdg = generate_pdg("""y = foo.x;""")
        print(pdg)
        # [1] [Program] (1 child)
        # 	[2] [ExpressionStatement] (1 child)
        # 		[3] [AssignmentExpression:"="] (2 children)
        # 			[4] [Identifier:"y"] (0 children)
        # 			[5] [MemberExpression] (2 children)
        # 				[6] [Identifier:"foo"] (0 children) --data--> [4]
        # 				[7] [Identifier:"x"] (0 children) --data--> [4]
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["x"])

        pdg = generate_pdg("""y = baz(bar(foo.x, a), b);""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["x"])

        pdg = generate_pdg("""y = baz(bar(foo.x(), a), b);""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, [])

        pdg = generate_pdg("""y = baz(bar(foo.x(), a), b);""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=True)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["x"])

        # Test assignments to ObjectPatterns (a somewhat implicit member access):
        for code in ["({url: sender_url} = sender);", "({url: url} = sender);", "({url} = sender);",
                     "({url, origin} = sender);", "({origin, url} = sender);", "({origin, url, tab} = sender);"]:
            pdg = generate_pdg(code)
            print(pdg)
            sender_identifier = pdg.get_identifier_by_name("sender")
            data_flows = DataFlow.beginning_at(sender_identifier)[0].get_all_continued_flows()
            print(f"Data flows: {[(str(df), df.get_accessed_members(include_method_calls=False)) for df in data_flows]}")
            self.assertTrue(any(
                data_flow.get_accessed_members(include_method_calls=False) == ["url"] for data_flow in data_flows))


if __name__ == '__main__':
    unittest.main()
