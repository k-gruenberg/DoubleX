import unittest

from kim_and_lee_vulnerability_detection import (is_safe_url_prefix, is_safe_origin_suffix,
                                                 expression_correctly_verifies_sender_url,
                                                 expression_correctly_verifies_sender,
                                                 get_all_message_listeners, get_all_fetch_response_identifiers,
                                                 get_all_fetch_identifiers, DataFlow)
from node_unittest2 import generate_pdg


class TestSenderAuthentication(unittest.TestCase):
    def test_url_prefix_check(self):
        # Positive examples:
        self.assertTrue(is_safe_url_prefix("https://admin.com/"))
        self.assertTrue(is_safe_url_prefix("https://admin.com/foo"))

        # Negative examples:
        self.assertFalse(is_safe_url_prefix("https://admin.com"))
        self.assertFalse(is_safe_url_prefix("http://admin.com/"))  # HTTP
        self.assertFalse(is_safe_url_prefix("http://admin.com/foo"))  # HTTP

    def test_origin_suffix_check(self):
        # Positive examples:
        self.assertTrue(is_safe_origin_suffix(".admin.com"))
        self.assertTrue(is_safe_origin_suffix(".admin.co.uk"))
        self.assertTrue(is_safe_origin_suffix("/admin.com"))
        self.assertTrue(is_safe_origin_suffix("//admin.com"))
        self.assertTrue(is_safe_origin_suffix("://admin.com"))
        self.assertTrue(is_safe_origin_suffix("https://admin.com"))

        # Negative examples:
        self.assertFalse(is_safe_origin_suffix("admin.com"))
        self.assertFalse(is_safe_origin_suffix(".co.uk"))
        self.assertFalse(is_safe_origin_suffix("http://admin.com"))
        self.assertFalse(is_safe_origin_suffix(".sth.ac.at"))  # https://publicsuffix.org/
        self.assertFalse(is_safe_origin_suffix("foo.sth.ac.at"))

    def test_get_all_message_listeners(self):
        # Test FunctionExpression:
        pdg = generate_pdg(r"""chrome.runtime.onMessage.addListener(function (x,y,z) {});""")
        print(pdg)
        # [1] [Program] (1 child)
        # 	[2] [ExpressionStatement] (1 child)
        # 		[3] [CallExpression] (2 children)
        # 			[4] [MemberExpression] (2 children)
        # 				[5] [MemberExpression] (2 children)
        # 					[6] [MemberExpression] (2 children)
        # 						[7] [Identifier:"chrome"] (0 children)
        # 						[8] [Identifier:"runtime"] (0 children)
        # 					[9] [Identifier:"onMessage"] (0 children)
        # 				[10] [Identifier:"addListener"] (0 children)
        # 			[11] [FunctionExpression] (4 children)
        # 				[12] [Identifier:"x"] (0 children)
        # 				[13] [Identifier:"y"] (0 children)
        # 				[14] [Identifier:"z"] (0 children)
        # 				[15] [BlockStatement] (0 children)
        for resolve_function_references in [True, False]:
            msg_listeners = get_all_message_listeners(pdg, resolve_function_references=resolve_function_references)
            print(f"msg_listeners = {msg_listeners}")
            self.assertEqual(len(msg_listeners), 1)
            self.assertEqual(msg_listeners[0].name, "FunctionExpression")

        # Test ArrowFunctionExpression:
        pdg = generate_pdg(r"""chrome.runtime.onMessage.addListener((x,y,z) => {});""")
        print(pdg)
        # [1] [Program] (1 child)
        # 	[2] [ExpressionStatement] (1 child)
        # 		[3] [CallExpression] (2 children)
        # 			[4] [MemberExpression] (2 children)
        # 				[5] [MemberExpression] (2 children)
        # 					[6] [MemberExpression] (2 children)
        # 						[7] [Identifier:"chrome"] (0 children)
        # 						[8] [Identifier:"runtime"] (0 children)
        # 					[9] [Identifier:"onMessage"] (0 children)
        # 				[10] [Identifier:"addListener"] (0 children)
        # 			[11] [ArrowFunctionExpression] (4 children)
        # 				[12] [Identifier:"x"] (0 children)
        # 				[13] [Identifier:"y"] (0 children)
        # 				[14] [Identifier:"z"] (0 children)
        # 				[15] [BlockStatement] (0 children)
        for resolve_function_references in [True, False]:
            msg_listeners = get_all_message_listeners(pdg, resolve_function_references=resolve_function_references)
            print(f"msg_listeners = {msg_listeners}")
            self.assertEqual(len(msg_listeners), 1)
            self.assertEqual(msg_listeners[0].name, "ArrowFunctionExpression")

        # Test Identifier/FunctionDeclaration:
        pdg = generate_pdg(r"""function foo(x,y,z) {}
                               chrome.runtime.onMessage.addListener(foo);""")
        print(pdg)
        # [1] [Program] (2 children)
        # 	[2] [FunctionDeclaration] (5 children) --e--> [7]
        # 		[3] [Identifier:"foo"] (0 children) --data--> [17]
        # 		[4] [Identifier:"x"] (0 children)
        # 		[5] [Identifier:"y"] (0 children)
        # 		[6] [Identifier:"z"] (0 children)
        # 		[7] [BlockStatement] (0 children)
        # 	[8] [ExpressionStatement] (1 child)
        # 		[9] [CallExpression] (2 children)
        # 			[10] [MemberExpression] (2 children)
        # 				[11] [MemberExpression] (2 children)
        # 					[12] [MemberExpression] (2 children)
        # 						[13] [Identifier:"chrome"] (0 children)
        # 						[14] [Identifier:"runtime"] (0 children)
        # 					[15] [Identifier:"onMessage"] (0 children)
        # 				[16] [Identifier:"addListener"] (0 children)
        # 			[17] [Identifier:"foo"] (0 children)
        msg_listeners = get_all_message_listeners(pdg, resolve_function_references=True)
        print(f"msg_listeners = {msg_listeners}")
        self.assertEqual(len(msg_listeners), 1)
        self.assertEqual(msg_listeners[0].name, "FunctionDeclaration")
        self.assertEqual(msg_listeners[0].children[0].name, "Identifier")
        self.assertEqual(msg_listeners[0].children[0].attributes['name'], "foo")
        msg_listeners = get_all_message_listeners(pdg, resolve_function_references=False)
        print(f"msg_listeners = {msg_listeners}")
        self.assertEqual(len(msg_listeners), 1)
        self.assertEqual(msg_listeners[0].name, "Identifier")
        self.assertEqual(msg_listeners[0].attributes['name'], "foo")

    def test_expression_correctly_verifies_sender_url(self):
        for quotation_char in ["\"", "'"]:
            pdg = generate_pdg(f"if (url.startsWith({quotation_char}https://admin.com/{quotation_char}))" + " {}")
            print(pdg)
            # [1] [Program] (1 child)
            # 	[2] [IfStatement] (2 children) --True--> [67]
            # 		[3] [CallExpression] (2 children)
            # 			[4] [MemberExpression] (2 children)
            # 				[5] [Identifier:"url"] (0 children)
            # 				[6] [Identifier:"startsWith"] (0 children)
            # 			[7] [Literal:"'https://admin.com/'"] (0 children)
            # 		[8] [BlockStatement] (0 children)
            test_expression = pdg.children[0].children[0]
            print(test_expression)
            # [3] [CallExpression] (2 children)
            # 	[4] [MemberExpression] (2 children)
            # 		[5] [Identifier:"url"] (0 children)
            # 		[6] [Identifier:"startsWith"] (0 children)
            # 	[7] [Literal:"'https://admin.com/'"] (0 children)
            sender_url_node = test_expression.get_all("Identifier")[0]
            print(f"sender_url_node = {sender_url_node}")
            # sender_url_node = [5] [Identifier:"url"] (0 children)
            self.assertTrue(expression_correctly_verifies_sender_url(test_expression=test_expression,
                                                                     sender_url_node=sender_url_node))

    def test_expression_correctly_verifies_sender(self):
        pdg = generate_pdg("""let url = sender.url; if (url.startsWith("https://admin.com/")) {}""")
        print(pdg)
        # [1] [Program] (2 children)
        # 	[2] [VariableDeclaration] (1 child)
        # 		[3] [VariableDeclarator] (2 children)
        # 			[4] [Identifier:"url"] (0 children) --data--> [11]
        # 			[5] [MemberExpression] (2 children)
        # 				[6] [Identifier:"sender"] (0 children) --data--> [4]
        # 				[7] [Identifier:"url"] (0 children) --data--> [4]
        # 	[8] [IfStatement] (2 children) --True--> [14]
        # 		[9] [CallExpression] (2 children)
        # 			[10] [MemberExpression] (2 children)
        # 				[11] [Identifier:"url"] (0 children)
        # 				[12] [Identifier:"startsWith"] (0 children)
        # 			[13] [Literal:""https://admin.com/""] (0 children)
        # 		[14] [BlockStatement] (0 children)
        if_statement = pdg.get_child("IfStatement")  # [8] [IfStatement] (2 children) --True--> [14]
        test_expression = if_statement.get_child("CallExpression")  # [9] [CallExpression] (2 children)
        original_sender_node = pdg.get_child("VariableDeclaration")\
                                  .get_child("VariableDeclarator")\
                                  .get_child("MemberExpression")\
                                  .children[0]
        sender_node = test_expression.get_child("MemberExpression").children[0]  # [11] [Identifier:"url"] (0 children)
        data_flows = DataFlow.beginning_at(original_sender_node)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        data_flow = data_flows[0]

        print(f"test_expression = {test_expression}")
        print(f"sender_node = {sender_node}")
        print(f"data_flow = {data_flow}")
        print(f"data_flow.get_accessed_members(include_method_calls=True) = "
              f"{data_flow.get_accessed_members(include_method_calls=True)}")
        print(f"data_flow.get_accessed_members(include_method_calls=False) = "
              f"{data_flow.get_accessed_members(include_method_calls=False)}")
        self.assertTrue(expression_correctly_verifies_sender(test_expression=test_expression,
                                                             sender_node=sender_node,
                                                             data_flow=data_flow))

    def test_get_accessed_members(self):
        pdg = generate_pdg("""y = foo.x;""")
        print(pdg)
        # [1] [Program] (1 child)
        # 	[2] [ExpressionStatement] (1 child)
        # 		[3] [AssignmentExpression:"="] (2 children)
        # 			[4] [Identifier:"y"] (0 children)
        # 			[5] [MemberExpression:"False"] (2 children)
        # 				[6] [Identifier:"foo"] (0 children) --data--> [4]
        # 				[7] [Identifier:"x"] (0 children) --data--> [4]
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["x"])

        # As "foo.x" is equivalent to "foo['x']" (with additional quotation marks!), they should be handled equally:

        pdg = generate_pdg("""y = foo['x'];""")
        print(pdg)
        # [1] [Program] (1 child)
        # 	[2] [ExpressionStatement] (1 child)
        # 		[3] [AssignmentExpression:"="] (2 children)
        # 			[4] [Identifier:"y"] (0 children)
        # 			[5] [MemberExpression:"True"] (2 children)
        # 				[6] [Identifier:"foo"] (0 children) --data--> [4]
        # 				[7] [Literal:"'x'"] (0 children)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["x"])

        pdg = generate_pdg("""y = foo["x"];""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["x"])

        # "foo[x]" on the other hand is an array index and shall *NOT* be handled:

        pdg = generate_pdg("""y = foo[x];""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, [])

        pdg = generate_pdg("""y = foo.a.b;""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a", "b"])

        pdg = generate_pdg("""y = foo['a'].b;""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a", "b"])

        pdg = generate_pdg("""y = foo.a['b'];""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a", "b"])

        pdg = generate_pdg("""y = foo.a.b();""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=True)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a", "b()"])

        pdg = generate_pdg("""y = foo.a.b();""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a"])

        pdg = generate_pdg("""y = foo.a.b.c;""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a", "b", "c"])

        pdg = generate_pdg("""y = foo.a.b.c.d;""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a", "b", "c", "d"])

        pdg = generate_pdg("""y = foo.a.b.c.d.e;""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a", "b", "c", "d", "e"])

        pdg = generate_pdg("""y = foo.a.b().c.d().e;""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=True)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["a", "b()", "c", "d()", "e"])

        pdg = generate_pdg("""y = baz(bar(foo.x, a), b);""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["x"])

        pdg = generate_pdg("""y = baz(bar(foo.x(), a), b);""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, [])

        pdg = generate_pdg("""y = baz(bar(foo.x(), a), b);""")
        print(pdg)
        foo_identifier = pdg.get_identifier_by_name("foo")
        data_flows = DataFlow.beginning_at(foo_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=True)
        print(f"accessed_members = {accessed_members}")
        self.assertEqual(accessed_members, ["x()"])

        # Test assignments to ObjectPatterns (a somewhat implicit member access):
        for code in ["({url: sender_url} = sender);", "({url: url} = sender);", "({url} = sender);",
                     "({url, origin} = sender);", "({origin, url} = sender);", "({origin, url, tab} = sender);"]:
            pdg = generate_pdg(code)
            print(pdg)
            sender_identifier = pdg.get_identifier_by_name("sender")
            data_flows = DataFlow.beginning_at(sender_identifier)[0].get_all_continued_flows()
            print(f"Data flows: {[(str(df), df.get_accessed_members(include_method_calls=False)) for df in data_flows]}")
            self.assertTrue(any(
                data_flow.get_accessed_members(include_method_calls=False) == ["url"] for data_flow in data_flows))

        # Example from doc comment of get_accessed_members():
        pdg = generate_pdg("""
                let s = sender;
                let x = s.url;                     // [MemberExpression]
                y = x.replace(/^https:\\/\\//,"");   // [CallExpression] > [MemberExpression]
                let url_prefix = y.split("/")[0];
            """)
        print(pdg)
        sender_identifier = pdg.get_identifier_by_name("sender")
        data_flows = DataFlow.beginning_at(sender_identifier)[0].get_all_continued_flows()
        self.assertEqual(len(data_flows), 1)
        print(f"Data flow: {data_flows[0]}")
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=False)
        print(f"accessed_members (include_method_calls=False) = {accessed_members}")
        self.assertEqual(accessed_members, ["url"])
        accessed_members = data_flows[0].get_accessed_members(include_method_calls=True)
        print(f"accessed_members (include_method_calls=True) = {accessed_members}")
        self.assertEqual(accessed_members, ["url", "replace()", "split()"])

    def test_get_all_fetch_response_identifiers(self):
        code = """
        fetch('https://example.com/')
            .then((response1) => console.log(response1));
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 1)
        self.assertEqual(all_fetch_response_identifiers[0].attributes['name'], "response1")

        code = """
        fetch('https://example.com/')
            .then((response1) => response1.json())
            .then((response2) => console.log(response2));
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 2)
        self.assertEqual(all_fetch_response_identifiers[0].attributes['name'], "response1")
        self.assertEqual(all_fetch_response_identifiers[1].attributes['name'], "response2")

        code = """
        fetch('https://example.com/')
            .then((response1, response2) => console.log(response1, response2));
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 2)

        code = """
        fetch('https://example.com/')
            .then((response1) => response1)
            .then((response2) => response2)
            .then((response3) => response3);
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 3)

        code = """
        fetch('https://example.com/')
            .then((response1, response2, response3) => console.log(response1, response2, response3));
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 3)

        code = """
        fetch('https://example.com/')
            .then((response1) => response1)
            .then((response2) => response2)
            .then((response3) => response3)
            .then((response4) => response4);
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 4)

        code = """
        fetch('https://example.com/')
            .then((response1, response2) => (response1, response2))
            .then((response3, response4) => (response3, response4));
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 4)

        # Test destructurings of arrow function parameters:
        code = """
        fetch('https://example.com/')
            .then(([x,y], [z,w]=[1,2]) => foo(x,y,z,w))
            .then(({a:b, c:d}, {e:f, g:h}={e:1,g:2}) => bar(b,d,f,h));
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 8)
        all_fetch_response_identifier_names = [identifier.attributes['name'] for identifier in all_fetch_response_identifiers]
        for identifier in ["x", "y", "z", "w", "b", "d", "f", "h"]:
            self.assertIn(identifier, all_fetch_response_identifier_names)

        code = """
        fetch('https://example.com/')
            .then((response1) => response1)
            .then((response2) => response2)
            .then((response3) => response3)
            .then((response4) => response4)
            .then((response5) => response5);
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 5)

        code = """
        fetch('https://example.com/')
            .then((response1) => response1)
            .then((response2) => response2)
            .then((response3) => response3)
            .then((response4) => response4)
            .then((response5) => response5)
            .then((response6) => response6);
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 6)
        self.assertEqual(all_fetch_response_identifiers[0].attributes['name'], "response1")
        self.assertEqual(all_fetch_response_identifiers[1].attributes['name'], "response2")
        self.assertEqual(all_fetch_response_identifiers[2].attributes['name'], "response3")
        self.assertEqual(all_fetch_response_identifiers[3].attributes['name'], "response4")
        self.assertEqual(all_fetch_response_identifiers[4].attributes['name'], "response5")
        self.assertEqual(all_fetch_response_identifiers[5].attributes['name'], "response6")

        # Real-world example from /pkehgijcmpdhfbdbbnkijodmdjhbjlgp-2021.11.23.1-Crx4Chrome.com/background.js
        #     ("Privacy Badger"):
        code = """
        fetch(constants.CNAME_DOMAINS_LOCAL_URL)
            .then(response => response.json())
            .then(data => {
                badger.cnameDomains = data;
            });
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 2)
        self.assertEqual(all_fetch_response_identifiers[0].attributes['name'], "response")
        self.assertEqual(all_fetch_response_identifiers[1].attributes['name'], "data")

        # Real-world example from /ndjpnladcallmjemlbaebfadecfhkepb-2.2.9-Crx4Chrome.com/background.js
        #     ("Office"):
        code = """
        fetch(e, {
            body: t,
            method: "POST"
        }).then((function(e) {
            var t = {};
            e.headers && e.headers.forEach((function(e, n) {
                t[n] = e
            })), o(e.status, t)
        })).catch((function(e) {
            i(0, {})
        }));
        """
        pdg = generate_pdg(code)
        all_fetch_response_identifiers = get_all_fetch_response_identifiers(pdg=pdg)
        print(all_fetch_response_identifiers)
        self.assertEqual(len(all_fetch_response_identifiers), 1)
        self.assertEqual(all_fetch_response_identifiers[0].attributes['name'], "e")

    def test_get_all_fetch_identifiers(self):
        # Real-world example from /pnlccmojcmeohlpggmfnbbiapkmbliob-9.3.2.0-Crx4Chrome.com/background.js
        #     ("RoboForm Password Manager"):
        code = """
        const n = await fetch(t, Object.assign({}, a, {
            method: e,
            headers: r
        }));
        """
        pdg = generate_pdg(code)
        all_fetch_identifiers = get_all_fetch_identifiers(pdg=pdg)
        self.assertEqual(len(all_fetch_identifiers), 1)

        code = """
        async function foobar() {
            const n = await fetch(t, Object.assign({}, a, {
                method: e,
                headers: r
            }));
            if (n.status < 400) return n;
            throw new Error("HTTP error " + (n.statusText || n.status))
        }
        """
        pdg = generate_pdg(code)
        all_fetch_identifiers = get_all_fetch_identifiers(pdg=pdg)
        self.assertEqual(len(all_fetch_identifiers), 1)

        # Real-world example from /nkbihfbeogaeaoehlefnkodbefgpgknn-10.12.4-Crx4Chrome.com/background.js
        #     ("MetaMask"):
        code = """
        function b(e, t) {
            return r(this, void 0, void 0, (function*() {
                const n = yield fetch(e, t);
                if (!n.ok) throw new Error(`Fetch failed with status '${n.status}' for request '${e}'`);
                return n
            }))
        }
        """
        pdg = generate_pdg(code)
        all_fetch_identifiers = get_all_fetch_identifiers(pdg=pdg)
        self.assertEqual(len(all_fetch_identifiers), 1)


if __name__ == '__main__':
    unittest.main()
